// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

import "forge-std/Test.sol";
import "./util/TestUtil.sol";
import "../../src/bridge/Bridge.sol";
import "../../src/bridge/SequencerInbox.sol";
import {ERC20Bridge} from "../../src/bridge/ERC20Bridge.sol";
import "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol";
import {EspressoTEEVerifier} from "../../src/bridge/EspressoTEEVerifier.sol";
import {
    TransparentUpgradeableProxy
} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import {
    V3QuoteVerifier
} from "@automata-network/dcap-attestation/contracts/verifiers/V3QuoteVerifier.sol";

contract RollupMock {
    address public immutable owner;

    constructor(address _owner) {
        owner = _owner;
    }
}

contract SequencerInboxTest is Test {
    event TEEAttestationQuoteVerified(uint256 indexed seqMessageIndex);
    error InvalidReportDataHash();

    address rollupOwner = address(137);
    uint256 maxDataSize = 10000;
    ISequencerInbox.MaxTimeVariation maxTimeVariation =
        ISequencerInbox.MaxTimeVariation({
            delayBlocks: 10,
            futureBlocks: 10,
            delaySeconds: 100,
            futureSeconds: 100
        });
    address dummyInbox = address(139);
    address proxyAdmin = address(140);
    bytes32 mrEnclave = bytes32(0x32ed2f272a3bb58e07dc8af2e66879a57c648549707cbeb396ffc234ba1b65d9);
    bytes32 mrSigner = bytes32(0x0458a0e62674775ca9a048016f817f39b0bd40153000aceb44a5128ded30555e);
    IReader4844 dummyReader4844 = IReader4844(address(137));

    uint256 public constant MAX_DATA_SIZE = 117964;
    address adminTEE = address(141);
    address fakeAddress = address(145);

    EspressoTEEVerifier espressoTEEVerifier;
    V3QuoteVerifier quoteVerifier;
    bytes sampleQuote;
    SequencerInbox seqInboxImpl;
    SequencerInbox seqInbox;
    Bridge bridgeImpl;
    Bridge bridge;
    RollupMock rollupMock;
    //  Address of the automata V3QuoteVerifier deployed on sepolia
    address v3QuoteVerifier = address(0x6E64769A13617f528a2135692484B681Ee1a7169);
    // address of the Reader4844 contract deployed on sepolia
    address reader4844 = address(0xf6134C5849Fe8177163747288d41283B271B1624);

    // This was generated by running the batch poster in the TEE
    // and coping the l2MessageData that it was trying to post in a batch
    bytes l2TEEData =
        hex"";

    function setUp() public {
        vm.createSelectFork("https://rpc.ankr.com/eth_sepolia");
        espressoTEEVerifier = new EspressoTEEVerifier(mrEnclave, mrSigner, v3QuoteVerifier);

        string memory quotePath = "/test/foundry/configs/sequencer_inbox_attestation.bin";
        string memory inputFile = string.concat(vm.projectRoot(), quotePath);
        sampleQuote = vm.readFileBinary(inputFile);
        seqInboxImpl = new SequencerInbox(maxDataSize, IReader4844(reader4844), false);
        rollupMock = new RollupMock(rollupOwner);
        bridgeImpl = new Bridge();
        bridge = Bridge(
            address(new TransparentUpgradeableProxy(address(bridgeImpl), proxyAdmin, ""))
        );

        bridge.initialize(IOwnable(address(rollupMock)));
        vm.prank(rollupOwner);
        bridge.setDelayedInbox(dummyInbox, true);

        seqInboxImpl = new SequencerInbox(maxDataSize, IReader4844(reader4844), false);
        seqInbox = SequencerInbox(
            address(new TransparentUpgradeableProxy(address(seqInboxImpl), proxyAdmin, ""))
        );
        seqInbox.initialize(bridge, maxTimeVariation, address(espressoTEEVerifier));

        vm.prank(rollupOwner);
        seqInbox.setIsBatchPoster(tx.origin, true);

        vm.prank(rollupOwner);
        bridge.setSequencerInbox(address(seqInbox));
    }

    function testAddSequencerL2BatchFromOrigin() public {
        uint256 subMessageCount = 1;
        uint256 nextSubMessageCount = 18;
        uint256 sequenceNumber = 1;
        uint256 delayedMessagesRead = 10;
        bytes32 reportDataHash = keccak256(
            abi.encode(
                sequenceNumber,
                delayedMessagesRead,
                l2TEEData,
                address(0),
                subMessageCount,
                nextSubMessageCount
            )
        );

        vm.prank(tx.origin);
        vm.expectRevert();

        //  We expect the TEE attestation quote to be validated
        vm.expectEmit();
        emit TEEAttestationQuoteVerified(sequenceNumber);
        seqInbox.addSequencerL2BatchFromOrigin(
            sequenceNumber,
            l2TEEData,
            delayedMessagesRead,
            IGasRefunder(0x0000000000000000000000000000000000000000),
            subMessageCount,
            nextSubMessageCount,
            sampleQuote
        );
    }

    function testAddSequencerL2BatchFromOriginWithIncorrectParams() public {
        bytes memory invalidData = hex"012346";
        uint256 subMessageCount = 1;
        uint256 nextSubMessageCount = 18;
        uint256 sequenceNumber = 1;
        uint256 delayedMessagesRead = 10;

        vm.prank(tx.origin);
        vm.expectRevert(abi.encodeWithSelector(InvalidReportDataHash.selector));
        seqInbox.addSequencerL2Batch(
            sequenceNumber,
            invalidData,
            delayedMessagesRead,
            IGasRefunder(0x0000000000000000000000000000000000000000),
            subMessageCount,
            nextSubMessageCount,
            sampleQuote
        );
    }

    function testAddSequencerL2Batch() public {
        uint256 subMessageCount = 1;
        uint256 nextSubMessageCount = 18;
        uint256 sequenceNumber = 1;
        uint256 delayedMessagesRead = 10;
        bytes32 reportDataHash = keccak256(
            abi.encode(
                sequenceNumber,
                delayedMessagesRead,
                l2TEEData,
                address(0),
                subMessageCount,
                nextSubMessageCount
            )
        );

        vm.prank(tx.origin);
        vm.expectRevert();

        //  We expect the TEE attestation quote to be validated
        vm.expectEmit();
        emit TEEAttestationQuoteVerified(sequenceNumber);
        seqInbox.addSequencerL2Batch(
            sequenceNumber,
            l2TEEData,
            delayedMessagesRead,
            IGasRefunder(0x0000000000000000000000000000000000000000),
            subMessageCount,
            nextSubMessageCount,
            sampleQuote
        );
    }

    function testAddSequencerL2BatchWithIncorrectParams() public {
        bytes memory invalidData = hex"012346";
        uint256 subMessageCount = 1;
        uint256 nextSubMessageCount = 18;
        uint256 sequenceNumber = 1;
        uint256 delayedMessagesRead = 10;

        vm.prank(tx.origin);
        vm.expectRevert(abi.encodeWithSelector(InvalidReportDataHash.selector));
        seqInbox.addSequencerL2Batch(
            sequenceNumber,
            invalidData,
            delayedMessagesRead,
            IGasRefunder(0x0000000000000000000000000000000000000000),
            subMessageCount,
            nextSubMessageCount,
            sampleQuote
        );
    }
}
